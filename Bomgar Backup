#
######################################
#  This script is for backing up Bomgar reporting
#  It also will report backup status to ITNotices
# Author: MFevold        Date: 7/27/16    
# Company:       
# Version .1    Revision Date:  
######################################

#This script leverages an account created in the Bomgar /login/login that has 0 permissions except for retrieving the reporting information


#Log for output
$Log = "Log: `n"

#Setup email alert
$emailfrom=
#$emailto=
$emailto=
$subject="Bomgar Backup "
$body="Backup "
$smtpserver=
$smtpclient = New-Object Net.Mail.SmtpClient($smtpserver, 25)

#This section is where data is gathered 
$TodaysDate = Get-Date -Format yyyy-MM-dd
$Log += $TodaysDate + " `n"
$BackupLocation = "E:\Unprotected\Bomgar\DailyBackups\$TodaysDate.xml"

#If(Filepath doesn't exist) 
if(!(Test-Path E:\Unprotected\Bomgar\DailyBackups)){
    $Log += "Path doesn't exist"
    $subject += "Failed: $TodaysDate"
    $body += "Failed: `n$Log"
    $smtpclient.Send($emailfrom, $emailto, $subject, $body)
    exit
}

try
{
    #
 
    $SecurePassword =  (Get-Content E:\Unprotected\Bomgar\password.txt ) | ConvertTo-SecureString -AsPlainText -Verbose -Force 
    $PostParams = @{username='Bomgar_API';password="$SecurePassword";generate_report='SupportSession';start_date="$TodaysDate";duration='0'}
    Invoke-WebRequest -Uri https://support.westernbanks.com/api/reporting -Method GET -Body $postParams  -TimeoutSec 180 -OutFile $BackupLocation -ErrorAction Stop

    #Look at this later
    #This tests to make sure the file we just made is larger than an empty xml
    if((Get-Item $BackupLocation).Length -gt 4kb){
        $subject += "Success: $TodaysDate"
        $Body += "to $BackupLocation Successful"
        $smtpclient.Send($emailfrom, $emailto, $subject, $body)
        exit
    }
    else
    {
        $Log += "Filesize to small. Size(in kb):" + (Get-Item $BackupLocation).Length +"`n note that 3kb is the standard size for empty xml in this case. `n Troubleshooting: Check if file is empty or exists"
        $subject += "Failed: $TodaysDate"
        $body += "Failed:`n$Log"
        $smtpclient.Send($emailfrom, $emailto, $subject, $body)
        exit
    }
}
catch
{
    $Log += $_.Exception.Message
    $subject += "Failed: $TodaysDate"
    $body += "Failed: Log: `n$Log"
    $smtpclient.Send($emailfrom, $emailto, $subject, $body)
    
}




